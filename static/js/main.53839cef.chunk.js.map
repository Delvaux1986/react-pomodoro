{"version":3,"sources":["components/breakinterval.js","components/sessionlength.js","components/timer.js","components/App.js","serviceWorker.js","index.js"],"names":["BreakInterval","props","class","disabled","isPlay","onClick","breakInterval","decreaseBreak","increaseBreak","SessionLength","sessionLength","decreaseSession","increaseSession","Timer","state","isSession","timerSeconde","invervalId","playTimer","bind","stopTimer","refresh","decreaseTimer","intervalId","setInterval","this","onPlayStopTimer","setState","timerMinute","toggleInterval","updateTimerMinute","prevState","clearInterval","refreshTimer","React","Component","App","breakLength","isPLay","onIncreaseBreakLength","onDecreaseBreakLength","onIncreaseSessionLength","onDecreaseSessionLength","onToggleInterval","onUpdateTimerMin","onRefreshTimer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53839cef.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst BreakInterval = (props) => {\r\n    const decreaseCounter = () => {\r\n        if(props.breakInterval === 1 ){\r\n            return;\r\n        }\r\n        props.decreaseBreak();\r\n    }\r\n    const increaseCounter = () => {\r\n        if(props.breakInterval === 60 ){\r\n            return;\r\n        }\r\n        props.increaseBreak();\r\n    }\r\n    \r\n    \r\n    return (\r\n        <section class=\"mb-5\">\r\n            <h4 class=\"mb-5\">break length</h4>\r\n            <section class=\"d-flex justify-content-center\">\r\n                <button class=\"mr-5\" disabled={props.isPlay === true ? \"disabled\" : \"\"} onClick={decreaseCounter}>Down</button>\r\n                    <p>{props.breakInterval}</p>\r\n                <button class=\"ml-5\"disabled={props.isPlay === true ? \"disabled\" : \"\"} onClick={increaseCounter}>Up</button>\r\n            </section>\r\n        </section>\r\n    )\r\n};\r\n\r\nexport default BreakInterval;","import React from 'react';\r\n\r\nconst SessionLength = (props) => {\r\n    const decreaseSession = () => {\r\n        if(props.sessionLength === 1) {\r\n            return;\r\n        }\r\n        props.decreaseSession();\r\n    }\r\n    \r\n    \r\n    \r\n    const increaseSession = () => {\r\n        if(props.sessionLength === 120) {\r\n            return;\r\n        }\r\n        props.increaseSession();\r\n    }\r\n    \r\n\r\n    return (\r\n        <section>\r\n            <h4 class=\"mb-3\">Session length</h4>\r\n            <section class=\"d-flex justify-content-center\">\r\n                <button class=\"mr-5\" disabled={props.isPlay === true ? \"disabled\" : \"\"} onClick={decreaseSession}>Down</button>\r\n                    <p>{props.sessionLength}</p>\r\n                <button class=\"ml-5\" disabled={props.isPlay === true ? \"disabled\" : \"\"} onClick={increaseSession}>Up</button>\r\n            </section>\r\n        </section>    \r\n    )\r\n}\r\n\r\nexport default SessionLength;","import React from 'react';\r\n// import useSound from 'use-sound';\r\n// import wav from './assets/alarm.wav';\r\n\r\nclass Timer extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            isSession : true,\r\n            timerSeconde : 0,\r\n            invervalId: 0\r\n        }\r\n        this.playTimer = this.playTimer.bind(this);\r\n        this.stopTimer = this.stopTimer.bind(this);\r\n        this.refresh = this.refresh.bind(this);\r\n        this.decreaseTimer = this.decreaseTimer.bind(this);\r\n    }\r\n\r\n    playTimer(){\r\n        let intervalId = setInterval(this.decreaseTimer, 1000);\r\n        this.props.onPlayStopTimer(true);\r\n        this.setState({\r\n            intervalId : intervalId\r\n        })\r\n    }\r\n\r\n    decreaseTimer(){\r\n        switch(this.state.timerSeconde) {\r\n            case 0:\r\n                if(this.props.timerMinute === 0 ) {\r\n                    if(this.state.isSession) {\r\n                        this.setState({\r\n                            isSession: false\r\n                        });\r\n                        this.props.toggleInterval(this.state.isSession);\r\n                    }else{\r\n                        // this.useSound({wav});\r\n                        this.setState({\r\n                            isSession : true\r\n                        });\r\n                        this.props.toggleInterval(this.state.isSession);\r\n                    }\r\n                }else{\r\n                    this.props.updateTimerMinute();\r\n                    this.setState({\r\n                        timerSeconde : 59\r\n                })\r\n                }\r\n                \r\n                break;\r\n            default:\r\n                this.setState((prevState) => {\r\n                    return {\r\n                    timerSeconde : prevState.timerSeconde - 1\r\n                }\r\n                })\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    stopTimer(){\r\n        clearInterval(this.state.intervalId);\r\n        this.props.onPlayStopTimer(false);\r\n    }\r\n    refresh(){\r\n        this.stopTimer();\r\n        this.props.onPlayStopTimer(false);\r\n        this.props.refreshTimer();\r\n        this.setState({\r\n            timerSeconde : 0,\r\n            isSession : true\r\n        })\r\n    }\r\n   \r\n\r\n    render() {\r\n        return (\r\n            <section>\r\n                <section class=\"text-center mb-5\">\r\n                    <h4 class=\"mb-3\">{this.state.isSession === true ? \"Session\" : \"Break\"}</h4>\r\n                    <span>{this.props.timerMinute}</span>\r\n                    <span>:</span>\r\n                    <span>{this.state.timerSeconde === 0\r\n                    ? \"00\" \r\n                    : this.state.timerSeconde < 10\r\n                    ? \"0\" + this.state.timerSeconde\r\n                    : this.state.timerSeconde}</span>\r\n                </section>\r\n                <section class=\"text-center mb-5\">\r\n                    <button class=\"mr-2\" onClick={this.playTimer} class=\"\">Play</button>\r\n                    <button class=\"mr-2 ml-2\" onClick={this.stopTimer}>Stop</button>\r\n                    <button class=\"ml-2\" onClick={this.refresh}>Refresh</button>\r\n                </section>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;","import React from 'react';\nimport '../App.css';\nimport BreakInterval from './breakinterval';\nimport SessionLength from './sessionlength';\nimport Timer from './timer';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timerMinute: 25,\n      isPLay: false\n    };\n\n    this.onIncreaseBreakLength = this.onIncreaseBreakLength.bind(this);\n    this.onDecreaseBreakLength = this.onDecreaseBreakLength.bind(this);\n    this.onIncreaseSessionLength = this.onIncreaseSessionLength.bind(this);\n    this.onDecreaseSessionLength = this.onDecreaseSessionLength.bind(this);\n    this.onToggleInterval = this.onToggleInterval.bind(this);\n    this.onUpdateTimerMin = this.onUpdateTimerMin.bind(this);\n    this.onRefreshTimer = this.onRefreshTimer.bind(this);\n    this.onPlayStopTimer = this.onPlayStopTimer.bind(this);\n  }\n// INCREASE OR DECREASE TIME OF BREAK\n  onIncreaseBreakLength() {\n    this.setState((prevState) => {\n      return {\n        breakLength: prevState.breakLength + 1,\n      }\n    })\n  }\n  onDecreaseBreakLength() {\n    this.setState((prevState) => {\n      return {\n        breakLength: prevState.breakLength - 1,\n      }\n    })\n  }\n// Increase or decrease Time of Session work \n  onIncreaseSessionLength() {\n    this.setState((prevState) => {\n      return {\n        sessionLength : prevState.sessionLength + 1,\n        timerMinute : prevState.sessionLength + 1\n      }\n    })\n  }\n  onDecreaseSessionLength() {\n    this.setState((prevState) => {\n      return {\n        sessionLength : prevState.sessionLength - 1,\n        timerMinute : prevState.sessionLength - 1\n      }\n    })\n  }\n// Update timer minute\n  onUpdateTimerMin() {\n    this.setState((prevState) => {\n      return {\n        timerMinute : prevState.timerMinute - 1\n      }\n    })\n  }\n  onToggleInterval(isSession) {\n    if(isSession){\n      this.setState({\n        timerMinute : this.state.sessionLength\n      })\n    }else{\n      this.setState({\n        timerMinute : this.state.breakLength\n      })\n    }\n  }\n  onRefreshTimer(){\n    this.setState({\n      timerMinute: this.state.sessionLength \n    })\n  }\n  onPlayStopTimer(isPLay){\n    this.setState({\n      isPLay : isPLay\n    })\n  }\n\n  render() {\n    return (\n      \n        <main class=\"text-center bg-dark text-light\">\n          <h2 class=\"mb-3\">Pomodoro Clock</h2>\n          <Timer \n            timerMinute={this.state.timerMinute}\n            breakLength={this.state.breakLength}\n            updateTimerMinute={this.onUpdateTimerMin}\n            toggleInterval={this.onToggleInterval}\n            refreshTimer = {this.onRefreshTimer}\n            onPlayStopTimer={this.onPlayStopTimer}\n          />\n          <BreakInterval\n            isPlay={this.state.isPLay} \n            breakInterval={this.state.breakLength} \n            increaseBreak={this.onIncreaseBreakLength}\n            decreaseBreak={this.onDecreaseBreakLength}\n          />\n          <SessionLength\n            isPlay={this.state.isPLay}  \n            sessionLength={this.state.sessionLength}\n            increaseSession={this.onIncreaseSessionLength}\n            decreaseSession={this.onDecreaseSessionLength} \n          />\n          \n        </main>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}